NAME: Gabriel Rivera
LOGIN: Gab3Riv

NAME: Elizabeth Samoska
LOGIN: elizabethsamoska

NAME: Shelby Curry
LOGIN:shelbyrcurry

GROUP: 


Deliverables #1
Change the top values to:
	U0 3 - changed to go through for loop to print "fun" three times
	U1 3 - changed to case 3 to print "computer science"
	U2 1 - changed to a 1 so it would be read as a true statment, printing flyers
	U3 3 - changed to 3 so the statment U3 == 3 and "go" is printed

Deliverables #2

How do you pass command line arguments to a program when using gdb? 
You can pass line arguments using “r args”.  Also you can use set args and then once it is executed, you can use show args to inspect it or debug it.  
How do you set a breakpoint which only occurs when a set of conditions is true (e.g. when certain variables are a certain value)? 
The command to set a break point is Break.  After the command break is given, the user will type in the file name and execute the debugging process. 
How do you execute the next line of C code in the program after stopping at a breakpoint? 
To go onto the next line of code you can use the ignore command.  The ignore command takes two arguments: the breakpoint number to skip, and the number of times to skip it.
If the next line of code is a function call, you'll execute the whole function call at once if you use your answer to #3. How do you tell GDB that you want to debug the code inside the function instead? 
You would have to stop the debugging process and then access the file once the debugging process has stopped.  
How do you resume the program after stopping at a breakpoint? 
The command to resume is continue.  This will allow the program to run after stopping at a breakpoint. 
How can you see the value of a variable (or even an expression like 1+2) in gdb? 
The print command will show the value that is printed out.  Or you can use info reg, which allows the user to see the registered values.  
How do you configure gdb so it prints the value of a variable after every step? 
You would have to put it into a loop, so every time the variable is ran it prints it out through the function.  
How do you print a list of all variables and their values in the current function? 
You can type info variables which will list all of the local and global variables.  Info locals displays the local variables of the current stack frame, which includes the static variables in that function. 
How do you exit out of gdb? 
You type in the exit command.  

Deliverables #3

#include <stdio.h>

typedef struct node {
	int val;
	struct node* next;
} node;

/* FIXME: this function is buggy. */
int fun_equal(const node* a, const node* b) {
	while (a != NULL) {
		if(a->val != b->val){           /*there was no brackets for if statement*/
        return 0;
		a = a->next;
		b = b->next;
		}else{                          /*else was not in the while loop and there was no else statement to begin with*/
	    return a == b;
	}
}	/* lists are equal if a and b are both null */
}

int main(int argc, char* argv) {
	int i;
	node nodes[10];

	for (i=0; i<10; i++) {
		nodes[i].val = 0;
		nodes[i].next = NULL;
	}

	nodes[0].next = &nodes[1];
	nodes[1].next = &nodes[2];
	nodes[2].next = &nodes[3];

	printf("equal test 1 result = %d\n", fun_equal(&nodes[0], &nodes[0]));
	printf("equal test 2 result = %d\n", fun_equal(&nodes[0], &nodes[2]));

	return 0;
}